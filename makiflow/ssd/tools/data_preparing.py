from __future__ import absolute_import
from makiflow.ssd.ssd_utils import resize_images_and_bboxes, prepare_data
from tqdm import tqdm



class DataPreparator:
    def __init__(self, annotations, class_name_to_num, path_to_data):
        """
        Parameters
        ----------
        annotations : dictionary
            Contains labels, bboxes and etc for each image. (Uses the format of the dictionary XmlParser or JsonParser
            produces)
        class_name_to_num : dictionary
            Maps class names with their indices. WARNING! INDICES MUST START COUNTING FROM 1! Example:
            {
                'cat' : 1,
                'dog' : 2,
                'car' : 3
            }
        path_to_data : string
            Path to folder where images lie. Examples:
            COCO example - '/mnt/data/coco_set/train2017/'.
        num_files : int
            Number of annotations (and images) to load later. Leave it None if you want to load all the data.
        """
        self.annotations = annotations
        self.class_name_to_num = class_name_to_num
        self.path_to_data = path_to_data
        self.num_files = num_files
        
    
    def load_images(self):
        print('Loading images, bboxes and labels...')
        self.images = []
        self.bboxes = []
        self.labels = []
        
        for annotation in tqdm(self.annotation_dict):
            image = cv2.imread(self.path_to_data+'{}'.format(annotation['filename']))
            bboxes = []
            labels = []
            
            for gt_object in annotation['objects']:
                bboxes.append(gt_object['box'])
                labels.append( self.class_name_to_num[gt_object['name']] )
                
            self.images.append(image)
            self.bboxes.append(bboxes)
            self.labels.append(labels)
        print('Images, bboxes and labels are loaded.')
        
        
    def __collect_image_info(self):
        self.images_info = []  # Used in prepare_data function
        for labels, bboxes in zip(self.labels, self.bboxes):
            image_info = {
                'bboxes': bboxes,
                'classes': labels
            }
            self.images_info.append(image_info)
        
        
    def resize_images_and_bboxes(self, new_size):
        """ 
        Resizes loaded images and bounding boxes accordingly.
        
        Parameters
        ----------
        new_size : tuple
            Contains new width and height. Example: (300, 300).
        """
        images, bboxes = resize_images_and_bboxes(self.image_array, self.bboxes_array, (300, 300))
        del self.images
        del self.bboxes
        self.images = images
        self.bboxes = bboxes
        self.__collect_image_info()
    
    
    def generate_masks_labels_locs(self, default_boxes, iou_trashhold=0.5):
        """
        Generates masks, labels and locs for later usage in fit function of the SSD class.
        
        Parameters
        ----------
        default_boxes : array like
            List of default boxes generated by an SSDModel instance. You can get them by
            accessing `default_boxes` field in the SSDModel instance.
        iou_trashhold : float
            Jaccard Index default box have to exceed to be marked as positive. Used for 
            generating masks and labels.
        
        Returns
        -------
        masks : numpy array
            Mask vector for positive detections.
        labels : numpy array
            Vector with sparse labels of the classes. Labels are of type numpy.int32.
        locs : numpy array
            Vector contain differences in coordinates between ground truth boxes and default boxes which
            will be used for the calculation of the localization loss.
        """
        labels = []
        loc_masks = []
        gt_locs = []
        for image_info in tqdm(self.images_info):
            prepared_data = ssd_utils.prepare_data(image_info, default_boxes, iou_trashhold=0.5)
            labels.append(prepared_data['labels'])
            loc_masks.append(prepared_data['loc_mask'])
            gt_locs.append(prepared_data['gt_locs'])
        
        self.last_labels = np.array(labels, dtype=np.int32)
        self.last_loc_masks = np.array(loc_masks, dtype=np.float32)
        self.last_gt_locs = np.array(gt_locs, dtype=np.float32)
        return self.last_labels, self.last_loc_masks, self.last_gt_locs
    
    
    def get_last_masks_labels_locs(self):
        return self.last_labels, self.last_loc_masks, self.last_gt_locs
    
    
    def normalize_images(self):
        """
        Normalizes loaded images by dividing each one by 255.
        
        Returns
        -------
        list
            Contains normalized images.
        """
        for i in range(len(self.images)):
            self.images[i] = np.array(self.images[i], dtype=np.float32) / 255
        return self.images

        
        
        
        
        
        
        
        
        
        
        
        
            
            
        